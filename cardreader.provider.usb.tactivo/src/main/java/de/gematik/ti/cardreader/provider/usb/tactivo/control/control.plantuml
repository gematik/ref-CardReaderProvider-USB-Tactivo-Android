@startuml

title __CONTROL's Class Diagram__\n

  namespace de.gematik.ti.cardreader.provider.usb.tactivo {
    namespace control {
      class de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCallback {
          ~ terminalType : int
          {static} - LOG : Logger
          - context : Context
          - terminalId : int
          + TactivoCallback()
          + connect()
          + initializationFailed()
          + initialized()
          + onReceive()
          + uninitialized()
          - onDeviceAttached()
          - onDeviceDetached()
      }
    }
  }
  

  namespace de.gematik.ti.cardreader.provider.usb.tactivo {
    namespace control {
      class de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardChecker {
          {static} - LOG : Logger
          {static} - TIMEOUT : int
          - active : boolean
          - cardEventTransmitter : CardEventTransmitter
          - cardReader : ICardReader
          - currentCardState : boolean
          + TactivoCardChecker()
          + run()
          + shutdown()
          - checkCardStateAndSendEvent()
          - isCardPresent()
      }
    }
  }
  

  namespace de.gematik.ti.cardreader.provider.usb.tactivo {
    namespace control {
      class de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardReaderController {
          {static} - LOG : Logger
          - cardCheckerMap : Map<ICardReader, TactivoCardChecker>
          - cardReaders : Collection<ICardReader>
          - context : Context
          - initialized : boolean
          {static} - instance : TactivoCardReaderController
          - mktInitializeCompleted : boolean
          - newPreciseTerminals : List<CardTerminal>
          - preciseTerminals : List<CardTerminal>
          - waitForMktInit : CompletableFuture<Boolean>
          + getCardReaders()
          {static} + getInstance()
          + setContext()
          # informAboutReaderConnection()
          ~ addNewAndInform()
          ~ removeAndInform()
          ~ setMktInitializeCompleted()
          - TactivoCardReaderController()
          - checkIfMktInitializeComplete()
          - findNewReaders()
          - findPreciseTerminals()
          - findRemovedReaders()
          - getNewPreciseTerminals()
          - getPreciseTerminals()
          - init()
          - intitializeMKT()
          - stopPreciseTerminalCardChecker()
      }
    }
  }
  

  namespace de.gematik.ti.cardreader.provider.usb.tactivo {
    namespace control {
      class de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardReaderProvider {
          - providerDescriptor : ProviderDescriptor
          + TactivoCardReaderProvider()
          + getCardReaderController()
          + getDescriptor()
      }
    }
  }
  

  de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCallback .up.|> com.precisebiometrics.android.mtk.api.PBInitializedCallback
  de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCallback -up-|> android.content.BroadcastReceiver
  de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCallback o-- de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardReaderController : controller
  de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardReaderController -up-|> de.gematik.ti.openhealthcard.common.AbstractAndroidCardReaderController
  de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardReaderController o-- de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCallback : callback
  de.gematik.ti.cardreader.provider.usb.tactivo.control.TactivoCardReaderProvider .up.|> de.gematik.ti.cardreader.provider.spi.ICardReaderControllerProvider


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
